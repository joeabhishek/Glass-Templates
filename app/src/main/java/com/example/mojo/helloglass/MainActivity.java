package com.example.mojo.helloglass;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.speech.tts.TextToSpeech;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Toast;

import com.example.mojo.helloglass.adapter.MovieCardsAdapter;
import com.example.mojo.helloglass.bluetooth.BluetoothActivity;
import com.example.mojo.helloglass.bluetooth.BluetoothChatService;
import com.example.mojo.helloglass.bluetooth.Constants;
import com.example.mojo.helloglass.model.MovieCard;
import com.google.android.glass.app.Card;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollView;
import com.google.glass.companion.CompanionMessagingUtil;
import com.google.glass.companion.Proto;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;


/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity implements
        TextToSpeech.OnInitListener {

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    //private CardScrollView mCardScroller;



    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    //private View mView;

    private List<MovieCard> mCards;
    private CardScrollView mCardScrollView;
    private Context context;
    private TextToSpeech tts;



    /* Bluetooth Variable Declarations
     */
    private final static int REQUEST_ENABLE_BT = 1;
    private static final String TAG = "BluetoothActivity";

    /**
     * Name of the connected device
     */
    private String mConnectedDeviceName = null;

    /**
     * Array adapter for the conversation thread
     */
    private ArrayAdapter<String> mConversationArrayAdapter;

    /**
     * String buffer for outgoing messages
     */
    private StringBuffer mOutStringBuffer;

    /**
     * Local Bluetooth adapter
     */
    private BluetoothAdapter mBluetoothAdapter = null;

    /**
     * Member object for the chat services
     */
    private BluetoothChatService mChatService = null;

    private Activity mCurrentActivity = null;
    public Activity getCurrentActivity(){
        return mCurrentActivity;
    }
    public void setCurrentActivity(Activity mCurrentActivity){
        this.mCurrentActivity = mCurrentActivity;
    }

    @Override
    protected void onCreate(Bundle bundle) {
        super.onCreate(bundle);

        //mView = buildView();
        //mCardScroller = new CardScrollView(this);

        //This is the movie cards implementation
        context = this;
        prepareMovieCards();

        mCardScrollView =  new CardScrollView(this);
        MovieCardsAdapter adapter = new MovieCardsAdapter(context, mCards);
        mCardScrollView.setAdapter(adapter);
        mCardScrollView.activate();


        //Text to speech initialization
        tts = new TextToSpeech(this, this);

        setCurrentActivity(this);

        setupChat();


//        mCardScroller.setAdapter(new CardScrollAdapter() {
//            @Override
//            public int getCount() {
//                return 1;
//            }
//
//            @Override
//            public Object getItem(int position) {
//                return mView;
//            }
//
//            @Override
//            public View getView(int position, View convertView, ViewGroup parent) {
//                return mView;
//            }
//
//            @Override
//            public int getPosition(Object item) {
//                if (mView.equals(item)) {
//                    return 0;
//                }
//                return AdapterView.INVALID_POSITION;
//            }
//        });
        //Handle the TAP event.
        mCardScrollView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                MovieCard movieCard = mCards.get(position);
                //speakOut(String.valueOf(movieCard.getText()));
                sendMessage(String.valueOf(movieCard.getText()));
            }
        });
        //setContentView(mCardScroller);
        setContentView(mCardScrollView);

    }

    private void prepareMovieCards() {
        mCards = new ArrayList<MovieCard>();

        // Card with full background image
        MovieCard mc = new MovieCard("I wanna go home. Does anyone know where my dad is?",
                "Pet store?", Card.ImageLayout.FULL,
                new int[] { R.drawable.card_full });
        mCards.add(mc);
        // Card with no background image
        mc = new MovieCard("I don't know. But who cares! Ha ha!",
                "Wait! What does that mean?", Card.ImageLayout.FULL, new int[] {});
        mCards.add(mc);


        // Card with full background of 3 images
        mc = new MovieCard("Fasten your seat belts, this is going to be one crazy project!!",
                "Oh, he lives. Hey, dude!", Card.ImageLayout.FULL, new int[] {
                R.drawable.card_bottom_left,
                R.drawable.card_bottom_right, R.drawable.card_top });
        mCards.add(mc);

        // Card with left aligned images
        mc = new MovieCard("Just keep swimming.",
                "I'm sorry, Dory. But I... do", Card.ImageLayout.LEFT, new int[] {
                R.drawable.card_bottom_left,
                R.drawable.card_bottom_right, R.drawable.card_top });
        mCards.add(mc);

    }


//    @Override
//    protected void onCreate(Bundle savedInstanceState) {
//        super.onCreate(savedInstanceState);
//        setContentView(R.menu.main);
//    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {
            case R.id.action_about:
                // About menu item selected
                Intent ia = new Intent(MainActivity.this, AboutActivity.class);
                startActivity(ia);
                Intent intnet = new Intent("com.hmkcode.android.USER_ACTION");
                sendBroadcast(intnet);
                return true;
            case R.id.action_live:
                // this is the service to create a live card
                startService(new Intent(this, LiveCardService.class));
                return true;
            case R.id.action_poke_phone:
                // this is the service to create a live card
                /*try {
                    pokePhone();
                } catch (Exception e) {
                    e.printStackTrace();
                }*/
                Intent intent = new Intent(this, BluetoothActivity.class);
                this.startActivity(intent);
            case R.id.action_speak:
//                Plays disallowed sound to indicate that TAP actions are not supported.
//                AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
//                am.playSoundEffect(Sounds.DISALLOWED);
                speakOut("Hello Joe");
                return true;
            case R.id.action_quit:
                // Quit menu item selected
                // we'll simply close the app
                LiveCardService liveCardService = new LiveCardService();
                liveCardService.mLiveCard.unpublish();
                liveCardService.stopSelf();
                finish();
                this.finishAffinity();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    private void pokePhone() throws Exception {
        Proto.Envelope envelope = CompanionMessagingUtil.newEnvelope();
        envelope.serialNumber = 12408317;
        JoeMessageUtil.send(envelope);
    }

    @Override
    public void onInit(int status) {

        if (status == TextToSpeech.SUCCESS) {

            int result = tts.setLanguage(Locale.US);

            if (result == TextToSpeech.LANG_MISSING_DATA
                    || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                Log.e("TTS", "This Language is not supported");
            } else {

            }

        } else {
            Log.e("TTS", "Initilization Failed!");
        }

    }

    private void speakOut(String text) {

        //String text = txtText.getText().toString();

        tts.speak(text, TextToSpeech.QUEUE_FLUSH, null);
    }

    @Override
    public void openOptionsMenu() {
        super.openOptionsMenu();

    }


    @Override
    protected void onResume() {
        super.onResume();
        //mCardScroller.activate();
        mCardScrollView.activate();
    }

    @Override
    protected void onPause() {
        // use stop message to disconnect from bluetooth socket
        sendMessage(String.valueOf("STOP"));
        //mCardScroller.deactivate();
        mCardScrollView.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);
        card.setText("Tap for options");
        return card.getView();
    }

    @Override
    public void onDestroy() {
        // Don't forget to shutdown tts!
        if (tts != null) {
            tts.stop();
            tts.shutdown();
        }
        super.onDestroy();
    }

    private void setupChat() {

            Log.d(TAG, "setupChat()");
            BluetoothDevice device = null;

            Set<BluetoothDevice> bondedDevices = mBluetoothAdapter.getDefaultAdapter().getBondedDevices();
            for (final BluetoothDevice d : bondedDevices) {
                if (d.getName().contains("Nexus")) {

                    Log.d("JOE", "Talking to " + d.getName());
                    device = d;
                }
            }

            // Initialize the BluetoothChatService to perform bluetooth connections
            mChatService = new BluetoothChatService(this, mHandler);

            mChatService.connect(device, false);

            // Initialize the array adapter for the conversation thread
            //mConversationArrayAdapter = new ArrayAdapter<String>(this, R.layout.message);

            // Initialize the buffer for outgoing messages
            mOutStringBuffer = new StringBuffer("");


    }

    /**
     * The Handler that gets information back from the BluetoothChatService
     */
    private final Handler mHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            //FragmentActivity activity = getActivity();
            switch (msg.what) {
                case Constants.MESSAGE_STATE_CHANGE:
                    switch (msg.arg1) {
                        case BluetoothChatService.STATE_CONNECTED:
                            //setStatus(getString(R.string.title_connected_to, mConnectedDeviceName));
                            //mConversationArrayAdapter.clear();
                            break;
                        case BluetoothChatService.STATE_CONNECTING:
                            //setStatus(R.string.title_connecting);
                            break;
                        case BluetoothChatService.STATE_LISTEN:
                        case BluetoothChatService.STATE_NONE:
                            //setStatus(R.string.title_not_connected);
                            break;
                    }
                    break;
                case Constants.MESSAGE_WRITE:
                    byte[] writeBuf = (byte[]) msg.obj;
                    // construct a string from the buffer
                    String writeMessage = new String(writeBuf);
                    //mConversationArrayAdapter.add("Me:  " + writeMessage);
                    break;
                case Constants.MESSAGE_READ:
                    byte[] readBuf = (byte[]) msg.obj;
                    // construct a string from the valid bytes in the buffer
                    String readMessage = new String(readBuf, 0, msg.arg1);
                    //mConversationArrayAdapter.add(mConnectedDeviceName + ":  " + readMessage);
                    break;
                case Constants.MESSAGE_DEVICE_NAME:
                    // save the connected device's name
                    mConnectedDeviceName = msg.getData().getString(Constants.DEVICE_NAME);
                    if (null != this) {
                        Toast.makeText(getCurrentActivity(), "Connected to "
                                + mConnectedDeviceName, Toast.LENGTH_SHORT).show();
                    }
                    break;
                case Constants.MESSAGE_TOAST:
                    if (null != getCurrentActivity()) {
                        Toast.makeText(getCurrentActivity(), msg.getData().getString(Constants.TOAST),
                                Toast.LENGTH_SHORT).show();
                    }
                    break;
            }
        }
    };

    /**
     * Sends a message.
     *
     * @param message A string of text to send.
     */
    private void sendMessage(String message) {
        // Check that we're actually connected before trying anything
        if (mChatService.getState() != BluetoothChatService.STATE_CONNECTED) {
            Toast.makeText(this, "Not Connected", Toast.LENGTH_SHORT).show();
            return;
        }

        // Check that there's actually something to send
        if (message.length() > 0) {
            // Get the message bytes and tell the BluetoothChatService to write
            byte[] send = message.getBytes();
            mChatService.write(send);

            // Reset out string buffer to zero and clear the edit text field
            mOutStringBuffer.setLength(0);
            //mOutEditText.setText(mOutStringBuffer);
        }
    }

}
